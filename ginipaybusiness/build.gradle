plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka'
}

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode libVersionCode
        versionName libVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        buildConfigField 'int', 'VERSION_CODE', "$libVersionCode"
        buildConfigField 'String', 'VERSION_NAME', "\"$libVersionName\""
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"

    api "net.gini:gini-pay-api-lib-android:${versions.payapi}"

    implementation "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation "dev.chrisbanes.insetter:insetter:${versions.insetter}"

    dokkaHtmlPlugin "org.jetbrains.dokka:kotlin-as-java-plugin:${versions.dokka}"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'io.mockk:mockk:1.11.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.3'
    testImplementation 'app.cash.turbine:turbine:0.4.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}


apply from: rootProject.file('gradle/codequality.gradle')
apply from: rootProject.file('gradle/maven.gradle')
apply from: rootProject.file('gradle/multidex_for_tests.gradle')

dokkaHtml {
    outputDirectory.set(file("$buildDir/dokka"))
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)

            includes.from(files("module.md", packageDocumentationPaths(android.sourceSets.main.java.srcDirs[0])))
        }
    }
}

dokkaJavadoc {
    outputDirectory.set(file("$buildDir/dokka-javadoc"))
}

static def packageDocumentationPaths(srcDir) {
    def packageDocs = []
    srcDir.eachFileRecurse {
        if (it.name == 'package.md') {
            packageDocs.add(it.getAbsolutePath())
        }
    }
    return packageDocs
}

task sourcesJar(type: Jar, dependsOn: 'assembleRelease') {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
